
{% extends "FOSUserBundle::layout.html.twig" %}

{% trans_default_domain 'FOSUserBundle' %}

{% block page_title %}{{ 'page.title.resetting.request'|trans({}, 'messages') }}{% endblock %}

{% block fos_user_content %}
    <!-- BEGIN FORGOT PASSWORD FORM -->
    <form class="forget-form" action="{{ path('fos_user_resetting_send_email') }}" method="post" style="display:inline">
        <h3 class="font-green">{{ 'page.title.resetting.request'|trans({}, 'messages') }}</h3>
        <p> {{ 'msg.resetting.request'|trans({}, 'messages') }} </p>
        <div class="form-group">
            <input class="form-control placeholder-no-fix" type="text" autocomplete="off" placeholder="{{ 'placeholder.user_or_email'|trans({}, 'messages') }}" name="username" />
        </div>
        <div class="form-actions">
            <a href="{{ path('fos_user_security_login') }}" class="btn green btn-outline">{{ 'link.back'|trans({}, 'messages') }}</a>
            <button type="submit" class="btn btn-success uppercase pull-right">{{ 'resetting.request.submit'|trans }}</button>
        </div>
    </form>
    <!-- END FORGOT PASSWORD FORM -->
{% endblock %}

{% block page_level_scripts %}
<script type="text/javascript">
var Login = function() {

    var handleForgetPassword = function() {
        $('.forget-form').validate({
            errorElement: 'span', //default input error message container
            errorClass: 'help-block', // default input error message class
            focusInvalid: false, // do not focus the last invalid input
            ignore: "",
            rules: {
                username: {
                    required: true,
                }
            },

            messages: {
                username: {
                    required: "{{ 'validation.required'|trans({}, 'messages') }}",
                }
            },

            invalidHandler: function(event, validator) { //display error alert on form submit

            },

            highlight: function(element) { // hightlight error inputs
                $(element)
                    .closest('.form-group').addClass('has-error'); // set error class to the control group
            },

            success: function(label) {
                label.closest('.form-group').removeClass('has-error');
                label.remove();
            },

            errorPlacement: function(error, element) {
                error.insertAfter(element.closest('.input-icon'));
            },

            submitHandler: function(form) {
                form.submit();
            }
        });

        $('.forget-form input').keypress(function(e) {
            if (e.which == 13) {
                if ($('.forget-form').validate().form()) {
                    $('.forget-form').submit();
                }
                return false;
            }
        });

        jQuery('#forget-password').click(function() {
            jQuery('.login-form').hide();
            jQuery('.forget-form').show();
        });

        jQuery('#back-btn').click(function() {
            jQuery('.login-form').show();
            jQuery('.forget-form').hide();
        });

    }

    return {
        //main function to initiate the module
        init: function() {
            handleForgetPassword();
        }
    };

}();

jQuery(document).ready(function() {
    Login.init();
});
</script>
{% endblock %}